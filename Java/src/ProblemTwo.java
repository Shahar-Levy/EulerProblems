public class ProblemTwo {
//    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//            1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

    public static void main(String[] args){
        System.out.println(evenFibonacci(4000000));
       // System.out.println(recursiveEvenFibonacci(4000000,1,1,0));
    }

    public static int evenFibonacci(int limit){
        int sum = 0;
        int fibOneAgo = 0;
        int fib2TwoAgo = 1;
        int fib = 1;

        while(fib < limit){
            if(fib % 2 == 0){
                sum += fib;
            }
            fib = fibOneAgo + fib2TwoAgo;
            fibOneAgo = fib2TwoAgo;
            fib2TwoAgo = fib;
        }

        if (fib < limit){
            if(fib % 2 == 0){
                sum += fib;
            }
            return evenFibonacci(fib - 1) + evenFibonacci(fib - 2);
        }
        return sum;
    }

    public static int recursiveEvenFibonacci(int limit, int fib, int lastFib, int lastLastFib){
        int sum = 0;
        int num = 1;
        int last = 1;
        int lastLast = 2;
        if (fib < limit){
            if(fib % 2 ==0){sum += fib;}
            return recursiveEvenFibonacci(limit, fib, lastFib, lastLastFib);

        }
        return sum;
    }
}